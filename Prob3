PROBLEM 3: 
Given a certain set of experimental points (𝑥1, 𝑦1), regardless of how many, the program
must be able to return the coefficients of the polynomial 𝑓(𝑥) that would best approximate the data
according to the least-norm error vector 𝑒(𝑥) in Experiment 4, i.e.
                                
                                𝑒(𝑥) = 𝑦𝑖 − 𝑓(𝑥𝑖)

Limit your polynomials from the 1st degree up to the 10th degree. The set of points should be input in
the form of an 𝑛 × 2 matrix where 𝑛 is the number of experimental data. Note that the data points
should only be the user input, and not 𝑛.


----------------------------------------------
#MACHINE PROBLEM 3

import numpy as np
import ast
import sys

print('Example [[x1,y1],[x2,y2]]')
astr = input('Enter an array: ') 

alist = ast.literal_eval(astr) 
a = np.asarray(alist)

al = len(a) 
# length of the inputted n
x = a[0:al,0] 
# for locating the values of x
y = a[0:al,1] 
# for locating the values of y

pp1 = []
pp2 = []
err=[]
ln=[]
def Poly():
    for n in range(1,al):
        if n <=10:
    
            p1 = np.polyfit(x,y,n)
            pp1.append(p1)
            
            p2 = np.polyval(p1,x) 
            pp2.append(p2)
            C = np.poly1d(p2)
            
            norm = np.linalg.norm(y-p2) #finding the norm
            err.append(norm)
            
            LNE = np.min(norm) #finding the least-norm error vector
            ln.append(LNE)
        elif n >10:
            sys.exit('We only accept 1st degree up to 10th degree. Please try again 🙂')
    print('Coefficient of the Polynomial: \n',p2,'\n')
    print('Equation Form: \n',C,'\n')
    print('Least-norm error vector e(x): \n',LNE,'\n')

Poly()
